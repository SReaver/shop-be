service: product-service
frameworkVersion: '3'
provider:
  name: aws
  stage: dev
  runtime: nodejs18.x
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: products
    QUEUE_NAME: catalogItemsQueue
    SQS_URL:
      Ref: SQSQueue
    TOPIC_NAME: createProductTopic
    SNS_ARN:
      Ref: SNSTopic
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action: "sqs:*"
          Resource:
            - Fn::GetAtt: [SQSQueue, Arn]
        - Effect: Allow
          Action: "sqs:*"
          Resource: "arn:aws:sqs:eu-west-1:747711022835:catalogItemsQueue"
        - Effect: Allow
          Action: "sns:*"
          Resource:
            Ref: SNSTopic

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

functions:
  getProductById:
    handler: lambda/getProductById.getProductById
    events:
      - http:
          path: /product/{id}
          method: get
  getProductList:
    handler: lambda/getProductList.getProductList
    events:
      - http:
          path: /products
          method: get
  createProduct:
    handler: lambda/createProduct.createProduct
    url:
      cors: true
    events:
      - http:
          path: /products
          method: POST
  catalogBatchProcess:
    handler: lambda/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

resources:
  Resources:
    ProductsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    StocksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: product_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: stocks
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.QUEUE_NAME}
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.TOPIC_NAME}
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: sergey_plotnikov1@epam.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
